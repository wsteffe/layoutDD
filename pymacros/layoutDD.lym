<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Domain Decomposition Macro</description>
 <prolog/>
 <epilog/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This is the new macro created with the sample macro package


import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), "Mod"))


pya.MessageBox.info("Information", "This is the new macro created with the sample macro package", pya.MessageBox.Ok)


menu = pya.Application.instance().main_window().menu()


import mapLayers

actions = []

def registerToolbarItems():

  global actions, menu

  act = pya.Action()
  act.title = "DD"
  menu.insert_item("@toolbar.end", "DD", act)
#  act.icon = path

  act = pya.Action()
  act.title = "importPCB"
#  act.on_triggered(importPCB)
  menu.insert_item("@toolbar.DD.end", "importPCB", act)
  actions.append(act)
  menu.insert_item("..", "..", act)

  act = pya.Action()
  act.title = "mapLayers"
  act.on_triggered(mapLayers)
  menu.insert_item("@toolbar.DD.end", "mapLayers", act)
  actions.append(act)
  menu.insert_item("..", "..", act)


registerToolbarItems()

# In order pull in classes from other packages, just specify these classes
# in the dependencies of this package. Provided those packages contain macros
# which are marked as "autorun-early", they will be loaded before this package
# and their modules and classes will become available.
 </text>
</klayout-macro>
