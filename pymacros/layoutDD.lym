<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Domain Decomposition Macro</description>
 <prolog/>
 <epilog/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This is the new macro created with the sample macro package


import sys
import os
import platform
import re

libPath  = os.path.realpath(os.path.join(os.path.dirname(__file__), "..", "python/layoutDD"))
if not libPath in sys.path:
   sys.path.append(libPath)

if sys.platform=="win32":
  FCdir=os.path.realpath(os.path.join(os.path.dirname(__file__), "../../../../AppData/Roaming/layoutDD_FreeCAD"))
  FCbinPath =os.path.realpath(FCdir+"/bin")
  if not FCbinPath in sys.path:
     sys.path.append(FCbinPath)

#pya.MessageBox.info("Information", "This is the new macro created with the sample macro package", pya.MessageBox.Ok)


menu = pya.Application.instance().main_window().menu()


from layoutDD import setup

setup.registerToolbarItems()

# In order pull in classes from other packages, just specify these classes
# in the dependencies of this package. Provided those packages contain macros
# which are marked as "autorun-early", they will be loaded before this package
# and their modules and classes will become available.
 </text>
</klayout-macro>
