<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Domain Decomposition Macro</description>
 <prolog/>
 <epilog/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This is the new macro created with the sample macro package


import sys
import os
import platform
import re

libPath  = os.path.realpath(os.path.join(os.path.dirname(__file__), "..", "python/layoutDD"))
if not libPath in sys.path:
   sys.path.append(libPath)

if platform.system()=="Windows":
   user=os.getlogin()
   pattern = "FreeCAD-Link-Tip-Win-x86_64-py3.8-[0-9]+/Mod$"
   for dirpath, dirnames, filenames in os.walk("C:/Users/"+user+"/AppData/Roaming/"):
      normpath=dirpath.replace('\\', '/')
      if re.search(pattern, normpath):
          sys.path.append(normpath)
          sys.path.append(normpath+"../bin")
#          pya.MessageBox.info("Information", normpath+" has been appended to python path", pya.MessageBox.Ok)
          break


#pya.MessageBox.info("Information", "This is the new macro created with the sample macro package", pya.MessageBox.Ok)


menu = pya.Application.instance().main_window().menu()


from layoutDD import setup

setup.registerToolbarItems()

# In order pull in classes from other packages, just specify these classes
# in the dependencies of this package. Provided those packages contain macros
# which are marked as "autorun-early", they will be loaded before this package
# and their modules and classes will become available.
 </text>
</klayout-macro>
